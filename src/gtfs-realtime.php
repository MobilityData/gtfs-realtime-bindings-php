<?php 
/**
 * Copyright 2015 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: gtfs-realtime.proto 
//   Date: 2015-02-27 05:56:17 


namespace transit_realtime {

         
    class FeedMessage extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.FeedMessage');

            $message_header = [
              1 => 'header',
              2 => 'entity'
            ];

            foreach($message_header as $key => $value) {
              $f = new \DrSlump\Protobuf\Field();
              $f->number = $key;
              $f->name   = $value;
              $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
              $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
                switch ($f->number) {
                  // required message header = 1
                  case 1:
                    $f->reference = '\transit_realtime\FeedHeader';
                    break;
                  // repeated message entity = 2
                  case 2:
                    $f->reference = '\transit_realtime\FeedEntity';
                    break;
                }
              $descriptor->addField($f);
            }

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }
            return $descriptor;
        }
        
        /**
         * Check if "header" has a value
         *
         * @return boolean
         */
        public function hasHeader()
        {
            return isset($this->header);
        }

        /**
         * Clear "header" value
         */
        public function clearHeader()
        {
            unset($this->header);
        }

        
        /**
         * Get "header" value
         *
         * @return transit_realtime\FeedHeader 
         */
        public function getHeader()
        {
            return $this->header;
        }

        /**
         * Set "header" value
         *
         * @param transit_realtime\FeedHeader $value
         */
        public function setHeader($value)
        {
            return $this->header = $value;
        }

        
                
        /**
         * Check if "entity" has a value
         *
         * @return boolean
         */
        public function hasEntity()
        {
            return isset($this->entity);
        }

        /**
         * Clear "entity" value
         */
        public function clearEntity()
        {
            unset($this->entity);
        }

        
        /**
         * Get "entity" value
         *
         * @return transit_realtime\FeedEntity[]
         */
        public function getEntity($idx = null)
        {
            if (NULL !== $idx) {
                return $this->entity[$idx];
            }

            return $this->entity;
        }

        /**
         * Get "entity" list of values
         *
         * @return transit_realtime\FeedEntity[]
         */
        public function getEntityList()
        {
            return $this->getEntity();
        }

        /**
         * Set "entity" value
         *
         * @param transit_realtime\FeedEntity[] $value
         */
        public function setEntity($value)
        {
            return $this->entity = $value;
        }

        /**
         * Add a new element to "entity"
         *
         * @param transit_realtime\FeedEntity $value
         */
        public function addEntity($value)
        {
            $this->entity[] = $value;
        }
    }
}


namespace transit_realtime {

         
    class FeedHeader extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.FeedHeader');

             
            // required string gtfs_realtime_version = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "gtfs_realtime_version";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional enum incrementality = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "incrementality";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\transit_realtime\FeedHeader\Incrementality';
            
             
            $f->default = \transit_realtime\FeedHeader\Incrementality::FULL_DATASET;

            $descriptor->addField($f);
             
            // optional uint64 timestamp = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "timestamp";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT64;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "gtfs_realtime_version" has a value
         *
         * @return boolean
         */
        public function hasGtfsRealtimeVersion()
        {
            return isset($this->gtfs_realtime_version);
        }

        /**
         * Clear "gtfs_realtime_version" value
         */
        public function clearGtfsRealtimeVersion()
        {
            unset($this->gtfs_realtime_version);
        }

        
        /**
         * Get "gtfs_realtime_version" value
         *
         * @return string 
         */
        public function getGtfsRealtimeVersion()
        {
            return $this->gtfs_realtime_version;
        }

        /**
         * Set "gtfs_realtime_version" value
         *
         * @param string $value
         */
        public function setGtfsRealtimeVersion($value)
        {
            return $this->gtfs_realtime_version = $value;
        }

        
                
        /**
         * Check if "incrementality" has a value
         *
         * @return boolean
         */
        public function hasIncrementality()
        {
            return isset($this->incrementality);
        }

        /**
         * Clear "incrementality" value
         */
        public function clearIncrementality()
        {
            unset($this->incrementality);
        }

        
        /**
         * Get "incrementality" value
         *
         * @return int - transit_realtime\FeedHeader\Incrementality 
         */
        public function getIncrementality()
        {
            return $this->incrementality;
        }

        /**
         * Set "incrementality" value
         *
         * @param int - transit_realtime\FeedHeader\Incrementality $value
         */
        public function setIncrementality($value)
        {
            return $this->incrementality = $value;
        }

        
                
        /**
         * Check if "timestamp" has a value
         *
         * @return boolean
         */
        public function hasTimestamp()
        {
            return isset($this->timestamp);
        }

        /**
         * Clear "timestamp" value
         */
        public function clearTimestamp()
        {
            unset($this->timestamp);
        }

        
        /**
         * Get "timestamp" value
         *
         * @return int 
         */
        public function getTimestamp()
        {
            return $this->timestamp;
        }

        /**
         * Set "timestamp" value
         *
         * @param int $value
         */
        public function setTimestamp($value)
        {
            return $this->timestamp = $value;
        }
    }
}


namespace transit_realtime\FeedHeader {

            class Incrementality extends \DrSlump\Protobuf\Enum
    {
                const FULL_DATASET = 0;
                const DIFFERENTIAL = 1;
    }
}
 

namespace transit_realtime {

         
    class FeedEntity extends \DrSlump\Protobuf\Message {
                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.FeedEntity');

             
            // required string id = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "id";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional bool is_deleted = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "is_deleted";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;
            
             
            $f->default = false;

            $descriptor->addField($f);
             
            // optional message trip_update = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "trip_update";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\TripUpdate';

            $descriptor->addField($f);
             
            // optional message vehicle = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "vehicle";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\VehiclePosition';

            $descriptor->addField($f);
             
            // optional message alert = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "alert";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\Alert';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "id" has a value
         *
         * @return boolean
         */
        public function hasId()
        {
            return isset($this->id);
        }

        /**
         * Clear "id" value
         */
        public function clearId()
        {
            unset($this->id);
        }

        
        /**
         * Get "id" value
         *
         * @return string 
         */
        public function getId()
        {
            return $this->id;
        }

        /**
         * Set "id" value
         *
         * @param string $value
         */
        public function setId($value)
        {
            return $this->id = $value;
        }

        
                
        /**
         * Check if "is_deleted" has a value
         *
         * @return boolean
         */
        public function hasIsDeleted()
        {
            return isset($this->is_deleted);
        }

        /**
         * Clear "is_deleted" value
         */
        public function clearIsDeleted()
        {
            unset($this->is_deleted);
        }

        
        /**
         * Get "is_deleted" value
         *
         * @return boolean 
         */
        public function getIsDeleted()
        {
            return $this->is_deleted;
        }

        /**
         * Set "is_deleted" value
         *
         * @param boolean $value
         */
        public function setIsDeleted($value)
        {
            return $this->is_deleted = $value;
        }

        
                
        /**
         * Check if "trip_update" has a value
         *
         * @return boolean
         */
        public function hasTripUpdate()
        {
            return isset($this->trip_update);
        }

        /**
         * Clear "trip_update" value
         */
        public function clearTripUpdate()
        {
            unset($this->trip_update);
        }

        
        /**
         * Get "trip_update" value
         *
         * @return transit_realtime\TripUpdate 
         */
        public function getTripUpdate()
        {
            return $this->trip_update;
        }

        /**
         * Set "trip_update" value
         *
         * @param transit_realtime\TripUpdate $value
         */
        public function setTripUpdate($value)
        {
            return $this->trip_update = $value;
        }

        
                
        /**
         * Check if "vehicle" has a value
         *
         * @return boolean
         */
        public function hasVehicle()
        {
            return isset($this->vehicle);
        }

        /**
         * Clear "vehicle" value
         */
        public function clearVehicle()
        {
            unset($this->vehicle);
        }

        
        /**
         * Get "vehicle" value
         *
         * @return transit_realtime\VehiclePosition 
         */
        public function getVehicle()
        {
            return $this->vehicle;
        }

        /**
         * Set "vehicle" value
         *
         * @param transit_realtime\VehiclePosition $value
         */
        public function setVehicle($value)
        {
            return $this->vehicle = $value;
        }

        
                
        /**
         * Check if "alert" has a value
         *
         * @return boolean
         */
        public function hasAlert()
        {
            return isset($this->alert);
        }

        /**
         * Clear "alert" value
         */
        public function clearAlert()
        {
            unset($this->alert);
        }

        
        /**
         * Get "alert" value
         *
         * @return transit_realtime\Alert 
         */
        public function getAlert()
        {
            return $this->alert;
        }

        /**
         * Set "alert" value
         *
         * @param transit_realtime\Alert $value
         */
        public function setAlert($value)
        {
            return $this->alert = $value;
        }
    }
}


namespace transit_realtime {

         
    class TripUpdate extends \DrSlump\Protobuf\Message {
                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.TripUpdate');

             
            // required message trip = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "trip";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\TripDescriptor';

            $descriptor->addField($f);
             
            // optional message vehicle = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "vehicle";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\VehicleDescriptor';

            $descriptor->addField($f);
             
            // repeated message stop_time_update = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "stop_time_update";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\TripUpdate\StopTimeUpdate';

            $descriptor->addField($f);
             
            // optional uint64 timestamp = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "timestamp";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT64;

            $descriptor->addField($f);
             
            // optional int32 delay = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "delay";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "trip" has a value
         *
         * @return boolean
         */
        public function hasTrip()
        {
            return isset($this->trip);
        }

        /**
         * Clear "trip" value
         */
        public function clearTrip()
        {
            unset($this->trip);
        }

        
        /**
         * Get "trip" value
         *
         * @return transit_realtime\TripDescriptor 
         */
        public function getTrip()
        {
            return $this->trip;
        }

        /**
         * Set "trip" value
         *
         * @param transit_realtime\TripDescriptor $value
         */
        public function setTrip($value)
        {
            return $this->trip = $value;
        }

        
                
        /**
         * Check if "vehicle" has a value
         *
         * @return boolean
         */
        public function hasVehicle()
        {
            return isset($this->vehicle);
        }

        /**
         * Clear "vehicle" value
         */
        public function clearVehicle()
        {
            unset($this->vehicle);
        }

        
        /**
         * Get "vehicle" value
         *
         * @return transit_realtime\VehicleDescriptor 
         */
        public function getVehicle()
        {
            return $this->vehicle;
        }

        /**
         * Set "vehicle" value
         *
         * @param transit_realtime\VehicleDescriptor $value
         */
        public function setVehicle($value)
        {
            return $this->vehicle = $value;
        }

        
                
        /**
         * Check if "stop_time_update" has a value
         *
         * @return boolean
         */
        public function hasStopTimeUpdate()
        {
            return isset($this->stop_time_update);
        }

        /**
         * Clear "stop_time_update" value
         */
        public function clearStopTimeUpdate()
        {
            unset($this->stop_time_update);
        }

        
        /**
         * Get "stop_time_update" value
         *
         * @return transit_realtime\TripUpdate\StopTimeUpdate[]
         */
        public function getStopTimeUpdate($idx = null)
        {
            if (NULL !== $idx) {
                return $this->stop_time_update[$idx];
            }

            return $this->stop_time_update;
        }

        /**
         * Get "stop_time_update" list of values
         *
         * @return transit_realtime\TripUpdate\StopTimeUpdate[]
         */
        public function getStopTimeUpdateList()
        {
            return $this->getStopTimeUpdate();
        }

        /**
         * Set "stop_time_update" value
         *
         * @param transit_realtime\TripUpdate\StopTimeUpdate[] $value
         */
        public function setStopTimeUpdate($value)
        {
            return $this->stop_time_update = $value;
        }

        /**
         * Add a new element to "stop_time_update"
         *
         * @param transit_realtime\TripUpdate\StopTimeUpdate $value
         */
        public function addStopTimeUpdate($value)
        {
            $this->stop_time_update[] = $value;
        }

        
                
        /**
         * Check if "timestamp" has a value
         *
         * @return boolean
         */
        public function hasTimestamp()
        {
            return isset($this->timestamp);
        }

        /**
         * Clear "timestamp" value
         */
        public function clearTimestamp()
        {
            unset($this->timestamp);
        }

        
        /**
         * Get "timestamp" value
         *
         * @return int 
         */
        public function getTimestamp()
        {
            return $this->timestamp;
        }

        /**
         * Set "timestamp" value
         *
         * @param int $value
         */
        public function setTimestamp($value)
        {
            return $this->timestamp = $value;
        }

        
                
        /**
         * Check if "delay" has a value
         *
         * @return boolean
         */
        public function hasDelay()
        {
            return isset($this->delay);
        }

        /**
         * Clear "delay" value
         */
        public function clearDelay()
        {
            unset($this->delay);
        }

        
        /**
         * Get "delay" value
         *
         * @return int 
         */
        public function getDelay()
        {
            return $this->delay;
        }

        /**
         * Set "delay" value
         *
         * @param int $value
         */
        public function setDelay($value)
        {
            return $this->delay = $value;
        }
    }
}


namespace transit_realtime\TripUpdate {

         
    class StopTimeEvent extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.TripUpdate.StopTimeEvent');

             
            // optional int32 delay = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "delay";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
             
            // optional int64 time = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "time";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT64;

            $descriptor->addField($f);
             
            // optional int32 uncertainty = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "uncertainty";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "delay" has a value
         *
         * @return boolean
         */
        public function hasDelay()
        {
            return isset($this->delay);
        }

        /**
         * Clear "delay" value
         */
        public function clearDelay()
        {
            unset($this->delay);
        }

        
        /**
         * Get "delay" value
         *
         * @return int 
         */
        public function getDelay()
        {
            return $this->delay;
        }

        /**
         * Set "delay" value
         *
         * @param int $value
         */
        public function setDelay($value)
        {
            return $this->delay = $value;
        }

        
                
        /**
         * Check if "time" has a value
         *
         * @return boolean
         */
        public function hasTime()
        {
            return isset($this->time);
        }

        /**
         * Clear "time" value
         */
        public function clearTime()
        {
            unset($this->time);
        }

        
        /**
         * Get "time" value
         *
         * @return int 
         */
        public function getTime()
        {
            return $this->time;
        }

        /**
         * Set "time" value
         *
         * @param int $value
         */
        public function setTime($value)
        {
            return $this->time = $value;
        }

        
                
        /**
         * Check if "uncertainty" has a value
         *
         * @return boolean
         */
        public function hasUncertainty()
        {
            return isset($this->uncertainty);
        }

        /**
         * Clear "uncertainty" value
         */
        public function clearUncertainty()
        {
            unset($this->uncertainty);
        }

        
        /**
         * Get "uncertainty" value
         *
         * @return int 
         */
        public function getUncertainty()
        {
            return $this->uncertainty;
        }

        /**
         * Set "uncertainty" value
         *
         * @param int $value
         */
        public function setUncertainty($value)
        {
            return $this->uncertainty = $value;
        }
    }
}


namespace transit_realtime\TripUpdate {

         
    class StopTimeUpdate extends \DrSlump\Protobuf\Message {
                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.TripUpdate.StopTimeUpdate');

             
            // optional uint32 stop_sequence = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "stop_sequence";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);
             
            // optional string stop_id = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "stop_id";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional message arrival = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "arrival";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\TripUpdate\StopTimeEvent';

            $descriptor->addField($f);
             
            // optional message departure = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "departure";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\TripUpdate\StopTimeEvent';

            $descriptor->addField($f);
             
            // optional enum schedule_relationship = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "schedule_relationship";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\transit_realtime\TripUpdate\StopTimeUpdate\ScheduleRelationship';
            
             
            $f->default = \transit_realtime\TripUpdate\StopTimeUpdate\ScheduleRelationship::SCHEDULED;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "stop_sequence" has a value
         *
         * @return boolean
         */
        public function hasStopSequence()
        {
            return isset($this->stop_sequence);
        }

        /**
         * Clear "stop_sequence" value
         */
        public function clearStopSequence()
        {
            unset($this->stop_sequence);
        }

        
        /**
         * Get "stop_sequence" value
         *
         * @return int 
         */
        public function getStopSequence()
        {
            return $this->stop_sequence;
        }

        /**
         * Set "stop_sequence" value
         *
         * @param int $value
         */
        public function setStopSequence($value)
        {
            return $this->stop_sequence = $value;
        }

        
                
        /**
         * Check if "stop_id" has a value
         *
         * @return boolean
         */
        public function hasStopId()
        {
            return isset($this->stop_id);
        }

        /**
         * Clear "stop_id" value
         */
        public function clearStopId()
        {
            unset($this->stop_id);
        }

        
        /**
         * Get "stop_id" value
         *
         * @return string 
         */
        public function getStopId()
        {
            return $this->stop_id;
        }

        /**
         * Set "stop_id" value
         *
         * @param string $value
         */
        public function setStopId($value)
        {
            return $this->stop_id = $value;
        }

        
                
        /**
         * Check if "arrival" has a value
         *
         * @return boolean
         */
        public function hasArrival()
        {
            return isset($this->arrival);
        }

        /**
         * Clear "arrival" value
         */
        public function clearArrival()
        {
            unset($this->arrival);
        }

        
        /**
         * Get "arrival" value
         *
         * @return transit_realtime\TripUpdate\StopTimeEvent 
         */
        public function getArrival()
        {
            return $this->arrival;
        }

        /**
         * Set "arrival" value
         *
         * @param transit_realtime\TripUpdate\StopTimeEvent $value
         */
        public function setArrival($value)
        {
            return $this->arrival = $value;
        }

        
                
        /**
         * Check if "departure" has a value
         *
         * @return boolean
         */
        public function hasDeparture()
        {
            return isset($this->departure);
        }

        /**
         * Clear "departure" value
         */
        public function clearDeparture()
        {
            unset($this->departure);
        }

        
        /**
         * Get "departure" value
         *
         * @return transit_realtime\TripUpdate\StopTimeEvent 
         */
        public function getDeparture()
        {
            return $this->departure;
        }

        /**
         * Set "departure" value
         *
         * @param transit_realtime\TripUpdate\StopTimeEvent $value
         */
        public function setDeparture($value)
        {
            return $this->departure = $value;
        }

        
                
        /**
         * Check if "schedule_relationship" has a value
         *
         * @return boolean
         */
        public function hasScheduleRelationship()
        {
            return isset($this->schedule_relationship);
        }

        /**
         * Clear "schedule_relationship" value
         */
        public function clearScheduleRelationship()
        {
            unset($this->schedule_relationship);
        }

        
        /**
         * Get "schedule_relationship" value
         *
         * @return int - transit_realtime\TripUpdate\StopTimeUpdate\ScheduleRelationship 
         */
        public function getScheduleRelationship()
        {
            return $this->schedule_relationship;
        }

        /**
         * Set "schedule_relationship" value
         *
         * @param int - transit_realtime\TripUpdate\StopTimeUpdate\ScheduleRelationship $value
         */
        public function setScheduleRelationship($value)
        {
            return $this->schedule_relationship = $value;
        }
    }
}


namespace transit_realtime\TripUpdate\StopTimeUpdate {

            class ScheduleRelationship extends \DrSlump\Protobuf\Enum
    {
                const SCHEDULED = 0;
                const SKIPPED = 1;
                const NO_DATA = 2;
    }
}
 

namespace transit_realtime {

         
    class VehiclePosition extends \DrSlump\Protobuf\Message {
                                                                                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.VehiclePosition');

             
            // optional message trip = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "trip";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\TripDescriptor';

            $descriptor->addField($f);
             
            // optional message vehicle = 8 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 8;
            $f->name   = "vehicle";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\VehicleDescriptor';

            $descriptor->addField($f);
             
            // optional message position = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "position";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\Position';

            $descriptor->addField($f);
             
            // optional uint32 current_stop_sequence = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "current_stop_sequence";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);
             
            // optional string stop_id = 7 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "stop_id";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional enum current_status = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "current_status";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\transit_realtime\VehiclePosition\VehicleStopStatus';
            
             
            $f->default = \transit_realtime\VehiclePosition\VehicleStopStatus::IN_TRANSIT_TO;

            $descriptor->addField($f);
             
            // optional uint64 timestamp = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "timestamp";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT64;

            $descriptor->addField($f);
             
            // optional enum congestion_level = 6 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "congestion_level";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\transit_realtime\VehiclePosition\CongestionLevel';

            $descriptor->addField($f);
             
            // optional enum occupancy_status = 9 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 9;
            $f->name   = "occupancy_status";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\transit_realtime\VehiclePosition\OccupancyStatus';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "trip" has a value
         *
         * @return boolean
         */
        public function hasTrip()
        {
            return isset($this->trip);
        }

        /**
         * Clear "trip" value
         */
        public function clearTrip()
        {
            unset($this->trip);
        }

        
        /**
         * Get "trip" value
         *
         * @return transit_realtime\TripDescriptor 
         */
        public function getTrip()
        {
            return $this->trip;
        }

        /**
         * Set "trip" value
         *
         * @param transit_realtime\TripDescriptor $value
         */
        public function setTrip($value)
        {
            return $this->trip = $value;
        }

        
                
        /**
         * Check if "vehicle" has a value
         *
         * @return boolean
         */
        public function hasVehicle()
        {
            return isset($this->vehicle);
        }

        /**
         * Clear "vehicle" value
         */
        public function clearVehicle()
        {
            unset($this->vehicle);
        }

        
        /**
         * Get "vehicle" value
         *
         * @return transit_realtime\VehicleDescriptor 
         */
        public function getVehicle()
        {
            return $this->vehicle;
        }

        /**
         * Set "vehicle" value
         *
         * @param transit_realtime\VehicleDescriptor $value
         */
        public function setVehicle($value)
        {
            return $this->vehicle = $value;
        }

        
                
        /**
         * Check if "position" has a value
         *
         * @return boolean
         */
        public function hasPosition()
        {
            return isset($this->position);
        }

        /**
         * Clear "position" value
         */
        public function clearPosition()
        {
            unset($this->position);
        }

        
        /**
         * Get "position" value
         *
         * @return transit_realtime\Position 
         */
        public function getPosition()
        {
            return $this->position;
        }

        /**
         * Set "position" value
         *
         * @param transit_realtime\Position $value
         */
        public function setPosition($value)
        {
            return $this->position = $value;
        }

        
                
        /**
         * Check if "current_stop_sequence" has a value
         *
         * @return boolean
         */
        public function hasCurrentStopSequence()
        {
            return isset($this->current_stop_sequence);
        }

        /**
         * Clear "current_stop_sequence" value
         */
        public function clearCurrentStopSequence()
        {
            unset($this->current_stop_sequence);
        }

        
        /**
         * Get "current_stop_sequence" value
         *
         * @return int 
         */
        public function getCurrentStopSequence()
        {
            return $this->current_stop_sequence;
        }

        /**
         * Set "current_stop_sequence" value
         *
         * @param int $value
         */
        public function setCurrentStopSequence($value)
        {
            return $this->current_stop_sequence = $value;
        }

        
                
        /**
         * Check if "stop_id" has a value
         *
         * @return boolean
         */
        public function hasStopId()
        {
            return isset($this->stop_id);
        }

        /**
         * Clear "stop_id" value
         */
        public function clearStopId()
        {
            unset($this->stop_id);
        }

        
        /**
         * Get "stop_id" value
         *
         * @return string 
         */
        public function getStopId()
        {
            return $this->stop_id;
        }

        /**
         * Set "stop_id" value
         *
         * @param string $value
         */
        public function setStopId($value)
        {
            return $this->stop_id = $value;
        }

        
                
        /**
         * Check if "current_status" has a value
         *
         * @return boolean
         */
        public function hasCurrentStatus()
        {
            return isset($this->current_status);
        }

        /**
         * Clear "current_status" value
         */
        public function clearCurrentStatus()
        {
            unset($this->current_status);
        }

        
        /**
         * Get "current_status" value
         *
         * @return int - transit_realtime\VehiclePosition\VehicleStopStatus 
         */
        public function getCurrentStatus()
        {
            return $this->current_status;
        }

        /**
         * Set "current_status" value
         *
         * @param int - transit_realtime\VehiclePosition\VehicleStopStatus $value
         */
        public function setCurrentStatus($value)
        {
            return $this->current_status = $value;
        }

        
                
        /**
         * Check if "timestamp" has a value
         *
         * @return boolean
         */
        public function hasTimestamp()
        {
            return isset($this->timestamp);
        }

        /**
         * Clear "timestamp" value
         */
        public function clearTimestamp()
        {
            unset($this->timestamp);
        }

        
        /**
         * Get "timestamp" value
         *
         * @return int 
         */
        public function getTimestamp()
        {
            return $this->timestamp;
        }

        /**
         * Set "timestamp" value
         *
         * @param int $value
         */
        public function setTimestamp($value)
        {
            return $this->timestamp = $value;
        }

        
                
        /**
         * Check if "congestion_level" has a value
         *
         * @return boolean
         */
        public function hasCongestionLevel()
        {
            return isset($this->congestion_level);
        }

        /**
         * Clear "congestion_level" value
         */
        public function clearCongestionLevel()
        {
            unset($this->congestion_level);
        }

        
        /**
         * Get "congestion_level" value
         *
         * @return int - transit_realtime\VehiclePosition\CongestionLevel 
         */
        public function getCongestionLevel()
        {
            return $this->congestion_level;
        }

        /**
         * Set "congestion_level" value
         *
         * @param int - transit_realtime\VehiclePosition\CongestionLevel $value
         */
        public function setCongestionLevel($value)
        {
            return $this->congestion_level = $value;
        }

        
                
        /**
         * Check if "occupancy_status" has a value
         *
         * @return boolean
         */
        public function hasOccupancyStatus()
        {
            return isset($this->occupancy_status);
        }

        /**
         * Clear "occupancy_status" value
         */
        public function clearOccupancyStatus()
        {
            unset($this->occupancy_status);
        }

        
        /**
         * Get "occupancy_status" value
         *
         * @return int - transit_realtime\VehiclePosition\OccupancyStatus 
         */
        public function getOccupancyStatus()
        {
            return $this->occupancy_status;
        }

        /**
         * Set "occupancy_status" value
         *
         * @param int - transit_realtime\VehiclePosition\OccupancyStatus $value
         */
        public function setOccupancyStatus($value)
        {
            return $this->occupancy_status = $value;
        }
    }
}


namespace transit_realtime\VehiclePosition {

            class VehicleStopStatus extends \DrSlump\Protobuf\Enum
    {
                const INCOMING_AT = 0;
                const STOPPED_AT = 1;
                const IN_TRANSIT_TO = 2;
    }
}
 

namespace transit_realtime\VehiclePosition {

            class CongestionLevel extends \DrSlump\Protobuf\Enum
    {
                const UNKNOWN_CONGESTION_LEVEL = 0;
                const RUNNING_SMOOTHLY = 1;
                const STOP_AND_GO = 2;
                const CONGESTION = 3;
                const SEVERE_CONGESTION = 4;
    }
}
 

namespace transit_realtime\VehiclePosition {

            class OccupancyStatus extends \DrSlump\Protobuf\Enum
    {
                const EMPTY0 = 0;
                const MANY_SEATS_AVAILABLE = 1;
                const FEW_SEATS_AVAILABLE = 2;
                const STANDING_ROOM_ONLY = 3;
                const CRUSHED_STANDING_ROOM_ONLY = 4;
                const FULL = 5;
                const NOT_ACCEPTING_PASSENGERS = 6;
    }
}
 

namespace transit_realtime {

         
    class Alert extends \DrSlump\Protobuf\Message {
                                                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.Alert');

             
            // repeated message active_period = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "active_period";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\TimeRange';

            $descriptor->addField($f);
             
            // repeated message informed_entity = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "informed_entity";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\EntitySelector';

            $descriptor->addField($f);
             
            // optional enum cause = 6 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "cause";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\transit_realtime\Alert\Cause';
            
             
            $f->default = \transit_realtime\Alert\Cause::UNKNOWN_CAUSE;

            $descriptor->addField($f);
             
            // optional enum effect = 7 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "effect";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\transit_realtime\Alert\Effect';
            
             
            $f->default = \transit_realtime\Alert\Effect::UNKNOWN_EFFECT;

            $descriptor->addField($f);
             
            // optional message url = 8 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 8;
            $f->name   = "url";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\TranslatedString';

            $descriptor->addField($f);
             
            // optional message header_text = 10 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 10;
            $f->name   = "header_text";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\TranslatedString';

            $descriptor->addField($f);
             
            // optional message description_text = 11 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 11;
            $f->name   = "description_text";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\TranslatedString';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "active_period" has a value
         *
         * @return boolean
         */
        public function hasActivePeriod()
        {
            return isset($this->active_period);
        }

        /**
         * Clear "active_period" value
         */
        public function clearActivePeriod()
        {
            unset($this->active_period);
        }

        
        /**
         * Get "active_period" value
         *
         * @return transit_realtime\TimeRange[]
         */
        public function getActivePeriod($idx = null)
        {
            if (NULL !== $idx) {
                return $this->active_period[$idx];
            }

            return $this->active_period;
        }

        /**
         * Get "active_period" list of values
         *
         * @return transit_realtime\TimeRange[]
         */
        public function getActivePeriodList()
        {
            return $this->getActivePeriod();
        }

        /**
         * Set "active_period" value
         *
         * @param transit_realtime\TimeRange[] $value
         */
        public function setActivePeriod($value)
        {
            return $this->active_period = $value;
        }

        /**
         * Add a new element to "active_period"
         *
         * @param transit_realtime\TimeRange $value
         */
        public function addActivePeriod($value)
        {
            $this->active_period[] = $value;
        }

        
                
        /**
         * Check if "informed_entity" has a value
         *
         * @return boolean
         */
        public function hasInformedEntity()
        {
            return isset($this->informed_entity);
        }

        /**
         * Clear "informed_entity" value
         */
        public function clearInformedEntity()
        {
            unset($this->informed_entity);
        }

        
        /**
         * Get "informed_entity" value
         *
         * @return transit_realtime\EntitySelector[]
         */
        public function getInformedEntity($idx = null)
        {
            if (NULL !== $idx) {
                return $this->informed_entity[$idx];
            }

            return $this->informed_entity;
        }

        /**
         * Get "informed_entity" list of values
         *
         * @return transit_realtime\EntitySelector[]
         */
        public function getInformedEntityList()
        {
            return $this->getInformedEntity();
        }

        /**
         * Set "informed_entity" value
         *
         * @param transit_realtime\EntitySelector[] $value
         */
        public function setInformedEntity($value)
        {
            return $this->informed_entity = $value;
        }

        /**
         * Add a new element to "informed_entity"
         *
         * @param transit_realtime\EntitySelector $value
         */
        public function addInformedEntity($value)
        {
            $this->informed_entity[] = $value;
        }

        
                
        /**
         * Check if "cause" has a value
         *
         * @return boolean
         */
        public function hasCause()
        {
            return isset($this->cause);
        }

        /**
         * Clear "cause" value
         */
        public function clearCause()
        {
            unset($this->cause);
        }

        
        /**
         * Get "cause" value
         *
         * @return int - transit_realtime\Alert\Cause 
         */
        public function getCause()
        {
            return $this->cause;
        }

        /**
         * Set "cause" value
         *
         * @param int - transit_realtime\Alert\Cause $value
         */
        public function setCause($value)
        {
            return $this->cause = $value;
        }

        
                
        /**
         * Check if "effect" has a value
         *
         * @return boolean
         */
        public function hasEffect()
        {
            return isset($this->effect);
        }

        /**
         * Clear "effect" value
         */
        public function clearEffect()
        {
            unset($this->effect);
        }

        
        /**
         * Get "effect" value
         *
         * @return int - transit_realtime\Alert\Effect 
         */
        public function getEffect()
        {
            return $this->effect;
        }

        /**
         * Set "effect" value
         *
         * @param int - transit_realtime\Alert\Effect $value
         */
        public function setEffect($value)
        {
            return $this->effect = $value;
        }

        
                
        /**
         * Check if "url" has a value
         *
         * @return boolean
         */
        public function hasUrl()
        {
            return isset($this->url);
        }

        /**
         * Clear "url" value
         */
        public function clearUrl()
        {
            unset($this->url);
        }

        
        /**
         * Get "url" value
         *
         * @return transit_realtime\TranslatedString 
         */
        public function getUrl()
        {
            return $this->url;
        }

        /**
         * Set "url" value
         *
         * @param transit_realtime\TranslatedString $value
         */
        public function setUrl($value)
        {
            return $this->url = $value;
        }

        
                
        /**
         * Check if "header_text" has a value
         *
         * @return boolean
         */
        public function hasHeaderText()
        {
            return isset($this->header_text);
        }

        /**
         * Clear "header_text" value
         */
        public function clearHeaderText()
        {
            unset($this->header_text);
        }

        
        /**
         * Get "header_text" value
         *
         * @return transit_realtime\TranslatedString 
         */
        public function getHeaderText()
        {
            return $this->header_text;
        }

        /**
         * Set "header_text" value
         *
         * @param transit_realtime\TranslatedString $value
         */
        public function setHeaderText($value)
        {
            return $this->header_text = $value;
        }

        
                
        /**
         * Check if "description_text" has a value
         *
         * @return boolean
         */
        public function hasDescriptionText()
        {
            return isset($this->description_text);
        }

        /**
         * Clear "description_text" value
         */
        public function clearDescriptionText()
        {
            unset($this->description_text);
        }

        
        /**
         * Get "description_text" value
         *
         * @return transit_realtime\TranslatedString 
         */
        public function getDescriptionText()
        {
            return $this->description_text;
        }

        /**
         * Set "description_text" value
         *
         * @param transit_realtime\TranslatedString $value
         */
        public function setDescriptionText($value)
        {
            return $this->description_text = $value;
        }
    }
}


namespace transit_realtime\Alert {

            class Cause extends \DrSlump\Protobuf\Enum
    {
                const UNKNOWN_CAUSE = 1;
                const OTHER_CAUSE = 2;
                const TECHNICAL_PROBLEM = 3;
                const STRIKE = 4;
                const DEMONSTRATION = 5;
                const ACCIDENT = 6;
                const HOLIDAY = 7;
                const WEATHER = 8;
                const MAINTENANCE = 9;
                const CONSTRUCTION = 10;
                const POLICE_ACTIVITY = 11;
                const MEDICAL_EMERGENCY = 12;
    }
}
 

namespace transit_realtime\Alert {

            class Effect extends \DrSlump\Protobuf\Enum
    {
                const NO_SERVICE = 1;
                const REDUCED_SERVICE = 2;
                const SIGNIFICANT_DELAYS = 3;
                const DETOUR = 4;
                const ADDITIONAL_SERVICE = 5;
                const MODIFIED_SERVICE = 6;
                const OTHER_EFFECT = 7;
                const UNKNOWN_EFFECT = 8;
                const STOP_MOVED = 9;
    }
}
 

namespace transit_realtime {

         
    class TimeRange extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.TimeRange');

             
            // optional uint64 start = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "start";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT64;

            $descriptor->addField($f);
             
            // optional uint64 end = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "end";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT64;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "start" has a value
         *
         * @return boolean
         */
        public function hasStart()
        {
            return isset($this->start);
        }

        /**
         * Clear "start" value
         */
        public function clearStart()
        {
            unset($this->start);
        }

        
        /**
         * Get "start" value
         *
         * @return int 
         */
        public function getStart()
        {
            return $this->start;
        }

        /**
         * Set "start" value
         *
         * @param int $value
         */
        public function setStart($value)
        {
            return $this->start = $value;
        }

        
                
        /**
         * Check if "end" has a value
         *
         * @return boolean
         */
        public function hasEnd()
        {
            return isset($this->end);
        }

        /**
         * Clear "end" value
         */
        public function clearEnd()
        {
            unset($this->end);
        }

        
        /**
         * Get "end" value
         *
         * @return int 
         */
        public function getEnd()
        {
            return $this->end;
        }

        /**
         * Set "end" value
         *
         * @param int $value
         */
        public function setEnd($value)
        {
            return $this->end = $value;
        }
    }
}


namespace transit_realtime {

         
    class Position extends \DrSlump\Protobuf\Message {
                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.Position');

             
            // required float latitude = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "latitude";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_FLOAT;

            $descriptor->addField($f);
             
            // required float longitude = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "longitude";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_FLOAT;

            $descriptor->addField($f);
             
            // optional float bearing = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "bearing";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_FLOAT;

            $descriptor->addField($f);
             
            // optional double odometer = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "odometer";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_DOUBLE;

            $descriptor->addField($f);
             
            // optional float speed = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "speed";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_FLOAT;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "latitude" has a value
         *
         * @return boolean
         */
        public function hasLatitude()
        {
            return isset($this->latitude);
        }

        /**
         * Clear "latitude" value
         */
        public function clearLatitude()
        {
            unset($this->latitude);
        }

        
        /**
         * Get "latitude" value
         *
         * @return float 
         */
        public function getLatitude()
        {
            return $this->latitude;
        }

        /**
         * Set "latitude" value
         *
         * @param float $value
         */
        public function setLatitude($value)
        {
            return $this->latitude = $value;
        }

        
                
        /**
         * Check if "longitude" has a value
         *
         * @return boolean
         */
        public function hasLongitude()
        {
            return isset($this->longitude);
        }

        /**
         * Clear "longitude" value
         */
        public function clearLongitude()
        {
            unset($this->longitude);
        }

        
        /**
         * Get "longitude" value
         *
         * @return float 
         */
        public function getLongitude()
        {
            return $this->longitude;
        }

        /**
         * Set "longitude" value
         *
         * @param float $value
         */
        public function setLongitude($value)
        {
            return $this->longitude = $value;
        }

        
                
        /**
         * Check if "bearing" has a value
         *
         * @return boolean
         */
        public function hasBearing()
        {
            return isset($this->bearing);
        }

        /**
         * Clear "bearing" value
         */
        public function clearBearing()
        {
            unset($this->bearing);
        }

        
        /**
         * Get "bearing" value
         *
         * @return float 
         */
        public function getBearing()
        {
            return $this->bearing;
        }

        /**
         * Set "bearing" value
         *
         * @param float $value
         */
        public function setBearing($value)
        {
            return $this->bearing = $value;
        }

        
                
        /**
         * Check if "odometer" has a value
         *
         * @return boolean
         */
        public function hasOdometer()
        {
            return isset($this->odometer);
        }

        /**
         * Clear "odometer" value
         */
        public function clearOdometer()
        {
            unset($this->odometer);
        }

        
        /**
         * Get "odometer" value
         *
         * @return float 
         */
        public function getOdometer()
        {
            return $this->odometer;
        }

        /**
         * Set "odometer" value
         *
         * @param float $value
         */
        public function setOdometer($value)
        {
            return $this->odometer = $value;
        }

        
                
        /**
         * Check if "speed" has a value
         *
         * @return boolean
         */
        public function hasSpeed()
        {
            return isset($this->speed);
        }

        /**
         * Clear "speed" value
         */
        public function clearSpeed()
        {
            unset($this->speed);
        }

        
        /**
         * Get "speed" value
         *
         * @return float 
         */
        public function getSpeed()
        {
            return $this->speed;
        }

        /**
         * Set "speed" value
         *
         * @param float $value
         */
        public function setSpeed($value)
        {
            return $this->speed = $value;
        }
    }
}


namespace transit_realtime {

         
    class TripDescriptor extends \DrSlump\Protobuf\Message {
                                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.TripDescriptor');

             
            // optional string trip_id = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "trip_id";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string route_id = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "route_id";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional uint32 direction_id = 6 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "direction_id";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);
             
            // optional string start_time = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "start_time";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string start_date = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "start_date";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional enum schedule_relationship = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "schedule_relationship";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\transit_realtime\TripDescriptor\ScheduleRelationship';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "trip_id" has a value
         *
         * @return boolean
         */
        public function hasTripId()
        {
            return isset($this->trip_id);
        }

        /**
         * Clear "trip_id" value
         */
        public function clearTripId()
        {
            unset($this->trip_id);
        }

        
        /**
         * Get "trip_id" value
         *
         * @return string 
         */
        public function getTripId()
        {
            return $this->trip_id;
        }

        /**
         * Set "trip_id" value
         *
         * @param string $value
         */
        public function setTripId($value)
        {
            return $this->trip_id = $value;
        }

        
                
        /**
         * Check if "route_id" has a value
         *
         * @return boolean
         */
        public function hasRouteId()
        {
            return isset($this->route_id);
        }

        /**
         * Clear "route_id" value
         */
        public function clearRouteId()
        {
            unset($this->route_id);
        }

        
        /**
         * Get "route_id" value
         *
         * @return string 
         */
        public function getRouteId()
        {
            return $this->route_id;
        }

        /**
         * Set "route_id" value
         *
         * @param string $value
         */
        public function setRouteId($value)
        {
            return $this->route_id = $value;
        }

        
                
        /**
         * Check if "direction_id" has a value
         *
         * @return boolean
         */
        public function hasDirectionId()
        {
            return isset($this->direction_id);
        }

        /**
         * Clear "direction_id" value
         */
        public function clearDirectionId()
        {
            unset($this->direction_id);
        }

        
        /**
         * Get "direction_id" value
         *
         * @return int 
         */
        public function getDirectionId()
        {
            return $this->direction_id;
        }

        /**
         * Set "direction_id" value
         *
         * @param int $value
         */
        public function setDirectionId($value)
        {
            return $this->direction_id = $value;
        }

        
                
        /**
         * Check if "start_time" has a value
         *
         * @return boolean
         */
        public function hasStartTime()
        {
            return isset($this->start_time);
        }

        /**
         * Clear "start_time" value
         */
        public function clearStartTime()
        {
            unset($this->start_time);
        }

        
        /**
         * Get "start_time" value
         *
         * @return string 
         */
        public function getStartTime()
        {
            return $this->start_time;
        }

        /**
         * Set "start_time" value
         *
         * @param string $value
         */
        public function setStartTime($value)
        {
            return $this->start_time = $value;
        }

        
                
        /**
         * Check if "start_date" has a value
         *
         * @return boolean
         */
        public function hasStartDate()
        {
            return isset($this->start_date);
        }

        /**
         * Clear "start_date" value
         */
        public function clearStartDate()
        {
            unset($this->start_date);
        }

        
        /**
         * Get "start_date" value
         *
         * @return string 
         */
        public function getStartDate()
        {
            return $this->start_date;
        }

        /**
         * Set "start_date" value
         *
         * @param string $value
         */
        public function setStartDate($value)
        {
            return $this->start_date = $value;
        }

        
                
        /**
         * Check if "schedule_relationship" has a value
         *
         * @return boolean
         */
        public function hasScheduleRelationship()
        {
            return isset($this->schedule_relationship);
        }

        /**
         * Clear "schedule_relationship" value
         */
        public function clearScheduleRelationship()
        {
            unset($this->schedule_relationship);
        }

        
        /**
         * Get "schedule_relationship" value
         *
         * @return int - transit_realtime\TripDescriptor\ScheduleRelationship 
         */
        public function getScheduleRelationship()
        {
            return $this->schedule_relationship;
        }

        /**
         * Set "schedule_relationship" value
         *
         * @param int - transit_realtime\TripDescriptor\ScheduleRelationship $value
         */
        public function setScheduleRelationship($value)
        {
            return $this->schedule_relationship = $value;
        }
    }
}


namespace transit_realtime\TripDescriptor {

            class ScheduleRelationship extends \DrSlump\Protobuf\Enum
    {
                const SCHEDULED = 0;
                const ADDED = 1;
                const UNSCHEDULED = 2;
                const CANCELED = 3;
    }
}
 

namespace transit_realtime {

         
    class VehicleDescriptor extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.VehicleDescriptor');

             
            // optional string id = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "id";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string label = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "label";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string license_plate = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "license_plate";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "id" has a value
         *
         * @return boolean
         */
        public function hasId()
        {
            return isset($this->id);
        }

        /**
         * Clear "id" value
         */
        public function clearId()
        {
            unset($this->id);
        }

        
        /**
         * Get "id" value
         *
         * @return string 
         */
        public function getId()
        {
            return $this->id;
        }

        /**
         * Set "id" value
         *
         * @param string $value
         */
        public function setId($value)
        {
            return $this->id = $value;
        }

        
                
        /**
         * Check if "label" has a value
         *
         * @return boolean
         */
        public function hasLabel()
        {
            return isset($this->label);
        }

        /**
         * Clear "label" value
         */
        public function clearLabel()
        {
            unset($this->label);
        }

        
        /**
         * Get "label" value
         *
         * @return string 
         */
        public function getLabel()
        {
            return $this->label;
        }

        /**
         * Set "label" value
         *
         * @param string $value
         */
        public function setLabel($value)
        {
            return $this->label = $value;
        }

        
                
        /**
         * Check if "license_plate" has a value
         *
         * @return boolean
         */
        public function hasLicensePlate()
        {
            return isset($this->license_plate);
        }

        /**
         * Clear "license_plate" value
         */
        public function clearLicensePlate()
        {
            unset($this->license_plate);
        }

        
        /**
         * Get "license_plate" value
         *
         * @return string 
         */
        public function getLicensePlate()
        {
            return $this->license_plate;
        }

        /**
         * Set "license_plate" value
         *
         * @param string $value
         */
        public function setLicensePlate($value)
        {
            return $this->license_plate = $value;
        }
    }
}


namespace transit_realtime {

         
    class EntitySelector extends \DrSlump\Protobuf\Message {
                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.EntitySelector');

             
            // optional string agency_id = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "agency_id";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string route_id = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "route_id";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional int32 route_type = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "route_type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
             
            // optional message trip = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "trip";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\TripDescriptor';

            $descriptor->addField($f);
             
            // optional string stop_id = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "stop_id";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "agency_id" has a value
         *
         * @return boolean
         */
        public function hasAgencyId()
        {
            return isset($this->agency_id);
        }

        /**
         * Clear "agency_id" value
         */
        public function clearAgencyId()
        {
            unset($this->agency_id);
        }

        
        /**
         * Get "agency_id" value
         *
         * @return string 
         */
        public function getAgencyId()
        {
            return $this->agency_id;
        }

        /**
         * Set "agency_id" value
         *
         * @param string $value
         */
        public function setAgencyId($value)
        {
            return $this->agency_id = $value;
        }

        
                
        /**
         * Check if "route_id" has a value
         *
         * @return boolean
         */
        public function hasRouteId()
        {
            return isset($this->route_id);
        }

        /**
         * Clear "route_id" value
         */
        public function clearRouteId()
        {
            unset($this->route_id);
        }

        
        /**
         * Get "route_id" value
         *
         * @return string 
         */
        public function getRouteId()
        {
            return $this->route_id;
        }

        /**
         * Set "route_id" value
         *
         * @param string $value
         */
        public function setRouteId($value)
        {
            return $this->route_id = $value;
        }

        
                
        /**
         * Check if "route_type" has a value
         *
         * @return boolean
         */
        public function hasRouteType()
        {
            return isset($this->route_type);
        }

        /**
         * Clear "route_type" value
         */
        public function clearRouteType()
        {
            unset($this->route_type);
        }

        
        /**
         * Get "route_type" value
         *
         * @return int 
         */
        public function getRouteType()
        {
            return $this->route_type;
        }

        /**
         * Set "route_type" value
         *
         * @param int $value
         */
        public function setRouteType($value)
        {
            return $this->route_type = $value;
        }

        
                
        /**
         * Check if "trip" has a value
         *
         * @return boolean
         */
        public function hasTrip()
        {
            return isset($this->trip);
        }

        /**
         * Clear "trip" value
         */
        public function clearTrip()
        {
            unset($this->trip);
        }

        
        /**
         * Get "trip" value
         *
         * @return transit_realtime\TripDescriptor 
         */
        public function getTrip()
        {
            return $this->trip;
        }

        /**
         * Set "trip" value
         *
         * @param transit_realtime\TripDescriptor $value
         */
        public function setTrip($value)
        {
            return $this->trip = $value;
        }

        
                
        /**
         * Check if "stop_id" has a value
         *
         * @return boolean
         */
        public function hasStopId()
        {
            return isset($this->stop_id);
        }

        /**
         * Clear "stop_id" value
         */
        public function clearStopId()
        {
            unset($this->stop_id);
        }

        
        /**
         * Get "stop_id" value
         *
         * @return string 
         */
        public function getStopId()
        {
            return $this->stop_id;
        }

        /**
         * Set "stop_id" value
         *
         * @param string $value
         */
        public function setStopId($value)
        {
            return $this->stop_id = $value;
        }
    }
}


namespace transit_realtime {

         
    class TranslatedString extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.TranslatedString');

             
            // repeated message translation = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "translation";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\transit_realtime\TranslatedString\Translation';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "translation" has a value
         *
         * @return boolean
         */
        public function hasTranslation()
        {
            return isset($this->translation);
        }

        /**
         * Clear "translation" value
         */
        public function clearTranslation()
        {
            unset($this->translation);
        }

        
        /**
         * Get "translation" value
         *
         * @return transit_realtime\TranslatedString\Translation[]
         */
        public function getTranslation($idx = null)
        {
            if (NULL !== $idx) {
                return $this->translation[$idx];
            }

            return $this->translation;
        }

        /**
         * Get "translation" list of values
         *
         * @return transit_realtime\TranslatedString\Translation[]
         */
        public function getTranslationList()
        {
            return $this->getTranslation();
        }

        /**
         * Set "translation" value
         *
         * @param transit_realtime\TranslatedString\Translation[] $value
         */
        public function setTranslation($value)
        {
            return $this->translation = $value;
        }

        /**
         * Add a new element to "translation"
         *
         * @param transit_realtime\TranslatedString\Translation $value
         */
        public function addTranslation($value)
        {
            $this->translation[] = $value;
        }
    }
}


namespace transit_realtime\TranslatedString {

         
    class Translation extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.TranslatedString.Translation');

             
            // required string text = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "text";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string language = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "language";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "text" has a value
         *
         * @return boolean
         */
        public function hasText()
        {
            return isset($this->text);
        }

        /**
         * Clear "text" value
         */
        public function clearText()
        {
            unset($this->text);
        }

        
        /**
         * Get "text" value
         *
         * @return string 
         */
        public function getText()
        {
            return $this->text;
        }

        /**
         * Set "text" value
         *
         * @param string $value
         */
        public function setText($value)
        {
            return $this->text = $value;
        }

        
                
        /**
         * Check if "language" has a value
         *
         * @return boolean
         */
        public function hasLanguage()
        {
            return isset($this->language);
        }

        /**
         * Clear "language" value
         */
        public function clearLanguage()
        {
            unset($this->language);
        }

        
        /**
         * Get "language" value
         *
         * @return string 
         */
        public function getLanguage()
        {
            return $this->language;
        }

        /**
         * Set "language" value
         *
         * @param string $value
         */
        public function setLanguage($value)
        {
            return $this->language = $value;
        }
    }
}


